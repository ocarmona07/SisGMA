//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SisGMA.Datos.InventarioDa
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using Entidades;
    using Entidades.Common;

    public class CategoriasProductosDa : BaseEntity
    {
        private readonly SisGMAEntities _sisGmaEntities;

        public CategoriasProductosDa()
        {
            IsValid = true;
            ErrorMessage = string.Empty;
            if (_sisGmaEntities == null)
            {
                _sisGmaEntities = new SisGMAEntities();
            }
        }
        
        public CategoriasProductos Insert(CategoriasProductos item)
        {
            try
            {
                _sisGmaEntities.CategoriasProductos.Add(item);
                _sisGmaEntities.SaveChanges();
                return item;
            }
            catch (EntryPointNotFoundException ep)
            {
                IsValid = false;
                ErrorMessage = ep.GetBaseException().Message;
                return null;
            }
            catch (Exception e)
            {
                IsValid = false;
                ErrorMessage = e.GetBaseException().Message;
                return null;
            }
        }

        public CategoriasProductos Get(int idItem)
        {
            try
            {
                return _sisGmaEntities.CategoriasProductos.FirstOrDefault(o => o.IdCategoria == idItem);
            }
            catch (EntryPointNotFoundException ep)
            {
                IsValid = false;
                ErrorMessage = ep.GetBaseException().Message;
                return null;
            }
            catch (Exception e)
            {
                IsValid = false;
                ErrorMessage = e.GetBaseException().Message;
                return null;
            }
        }

        public List<CategoriasProductos> GetAll()
        {
            try
            {
                return _sisGmaEntities.CategoriasProductos.ToList();
            }
            catch (EntryPointNotFoundException ep)
            {
                IsValid = false;
                ErrorMessage = ep.GetBaseException().Message;
                return null;
            }
            catch (Exception e)
            {
                IsValid = false;
                ErrorMessage = e.GetBaseException().Message;
                return null;
            }
        }

        public CategoriasProductos Update(CategoriasProductos item)
        {
            try
            {
                _sisGmaEntities.Entry(item).State = EntityState.Modified;
                _sisGmaEntities.SaveChanges();
                return item;
            }
            catch (EntryPointNotFoundException ep)
            {
                IsValid = false;
                ErrorMessage = ep.GetBaseException().Message;
                return null;
            }
            catch (Exception e)
            {
                IsValid = false;
                ErrorMessage = e.GetBaseException().Message;
                return null;
            }
            finally
            {
                _sisGmaEntities.Dispose();
            }
        }

        public bool UpdateEstado(int idItem, bool estado)
        {
            try
            {
                var item = _sisGmaEntities.CategoriasProductos.FirstOrDefault(o => o.IdCategoria == idItem);
                if (item != null)
                {
                    item.Estado = estado;
                    _sisGmaEntities.Entry(item).State = EntityState.Modified;
                    return _sisGmaEntities.SaveChanges() > 0;
                }
                else
                {
                    return false;
                }
            }
            catch (EntryPointNotFoundException ep)
            {
                IsValid = false;
                ErrorMessage = ep.GetBaseException().Message;
                return false;
            }
            catch (Exception e)
            {
                IsValid = false;
                ErrorMessage = e.GetBaseException().Message;
                return false;
            }
            finally
            {
                _sisGmaEntities.Dispose();
            }
        }

        public bool Delete(int idItem)
        {
            try
            {
                var entry = _sisGmaEntities.CategoriasProductos.FirstOrDefault(o => o.IdCategoria == idItem);
                _sisGmaEntities.Entry(entry).State = EntityState.Deleted;
                return _sisGmaEntities.SaveChanges() > 0;
            }
            catch (EntryPointNotFoundException ep)
            {
                IsValid = false;
                ErrorMessage = ep.GetBaseException().Message;
                return false;
            }
            catch (Exception e)
            {
                IsValid = false;
                ErrorMessage = e.GetBaseException().Message;
                return false;
            }
        }
    }
}
